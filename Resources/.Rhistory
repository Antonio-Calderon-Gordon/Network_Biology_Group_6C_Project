EnhancedVolcano(data, title = paste0("Breast cancer vs. Healthy (",nrow(degs), " DEGs)"), lab = data$GeneName, x = "log2FC", y = "P.Value", pCutoff = pvalue.cutoff, FCcutoff = log2fc.cutoff, labSize = 3, xlim = c(-15,15), ylim=c(0,8))
data <- read_excel("data/data-breast-cancer.xlsx")
res.wp.up <- clusterProfiler::enricher(genes.up$GeneID, TERM2GENE = genesets.wp, pAdjustMethod = "fdr", pvalueCutoff = 0.05, minGSSize = 5, maxGSSize = 400)
install.packages(clusterProfiler)
install.packages("clusterProfiler")
install.pack("BiocManager")
install.packages("BiocManager")
# Install a package from Bioconductor
BiocManager::install("clusterProfiler")
res.wp.up <- clusterProfiler::enricher(genes.up$GeneID, TERM2GENE = genesets.wp, pAdjustMethod = "fdr", pvalueCutoff = 0.05, minGSSize = 5, maxGSSize = 400)
genesets.wp <- msigdbr(species = "Homo sapiens", subcategory = "CP:WIKIPATHWAYS") %>% dplyr::select(gs_name, ensembl_gene)
genesets.wp <- msigdbr(species = "Homo sapiens", subcategory = "CP:WIKIPATHWAYS") %% dplyr::select(gs_name, ensembl_gene)
# Let's retrieve information about the human pathways in WikiPathways
genesets.wp <- msigdbr(species = "Homo sapiens", subcategory = "CP:WIKIPATHWAYS") %% dplyr::select(gs_name, ensembl_gene)
install.packages("msigdbr")
genesets.wp <- msigdbr(species = "Homo sapiens", subcategory = "CP:WIKIPATHWAYS") %% dplyr::select(gs_name, ensembl_gene)
if (!("BiocManager" %in% installed.packages())) { install.packages("BiocManager", update=FALSE) }
if (!("rstudioapi" %in% installed.packages())) { BiocManager::install("rstudioapi", update=FALSE) }
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db", update=FALSE) }
library(RCy3)
networls <- RCy3::getNetworkList()
print(networks)
print(networls)
network_name <- "CTL_PI3K-Akt signaling - Homo sapiens_1"
RCy3::setCurrentNetwork(network_name)
node_table <- RCy3::getTableColumns("node")
head(node_table)
# Retrieve node attributes including 'CTL.drugbank'
node_table <- RCy3::getTableColumns('node', columns = c('SUID', 'CTL.drugbank'))
# Filter to get only gene nodes (where CTL.drugbank is NA or empty)
gene_nodes <- subset(node_table, is.na(CTL.drugbank) | CTL.drugbank == "")
# Select the gene nodes in Cytoscape
RCy3::selectNodes(node.names = gene_nodes$SUID, by.col = "SUID")
# Select the gene nodes in Cytoscape
RCy3::selectNodes(node.names = gene_nodes$SUID, by.col = "CTL.drugbank")
> RCy3::selectNodes(node.names = gene_nodes$name, by.col = "CTL.drugbank")
RCy3::selectNodes(node.names = gene_nodes$name, by.col = "CTL.drugbank")
RCy3::selectNodes(node.names = gene_nodes$CTL.drugbank, by.col = "CTL.drugbank")
f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
f2 <- createColumnFilter("adj.P.Value", "adj.P.Value", 0.05, "LESS_THAN")
f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
f2 <- createColumnFilter("adj.PValue", "adj.PValue", 0.05, "LESS_THAN")
f <- intersect(f1$nodes, f2$nodes)
clearSelection()
selectNodes(f, by.col = "shared name")
createSubnetwork("selected", "all")
# Set the target network
network_name <- "TL_PI3K-Akt signaling - Homo sapiens_1"  # Replace with your network name
RCy3::setCurrentNetwork(TL_PI3K-Akt signaling - Homo sapiens_1)
library(RCy3)
networks <- RCy3::getNetworkList()
print(networks)
# Set the target network
network_name <- "TL_PI3K-Akt signaling - Homo sapiens_1"  # Replace with your network name
RCy3::setCurrentNetwork("TL_PI3K-Akt signaling - Homo sapiens_1")
network_name <- "CTL_PI3K-Akt signaling - Homo sapiens_1"  # Replace with your network name
RCy3::setCurrentNetwork("CTL_PI3K-Akt signaling - Homo sapiens_1")
node_table <- RCy3::getTableColumns('CTL.drugbank')
# Load the library
library(RCy3)
# List available networks
networks <- RCy3::getNetworkList()
print(networks)
# Set the target network
network_name <- "CTL_PI3K-Akt signaling - Homo sapiens_1"  # Replace with your network name
RCy3::setCurrentNetwork("CTL_PI3K-Akt signaling - Homo sapiens_1")
# Retrieve and inspect node attributes
node_table <- RCy3::getTableColumns('CTL.drugbank')
pw.id <- "WP4172"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pw.id))
# load the data into Cytoscape (columns get added at the bottom)
loadTableData(data, data.key.column = "GeneID", table.key.column = "Ensembl")
f1 <- createColumnFilter("Type$GeneProduct")
# copied and adapted from Step 3
pw.id <- "WP4172"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pw.id))
# load the data into Cytoscape (columns get added at the bottom)
loadTableData(data, data.key.column = "GeneID", table.key.column = "Ensembl")
# Script:       Step1_DataExploration.R
# Description:  In this script, we will explore the differential gene
#               expression dataset comparing breast cancer vs. healthy tissue
#               samples. The RNA-sequencing dataset was retrieved from
#               TCGA (The Cancer Genome Atlas) and pre-processed in R.
#               Differential gene expression analysis was performed with the
#               DESeq2 R-package.
# Version: 1.0
# Last updated: 2024-06-10
# Author: mkutmon
# #############################################
# R INSTRUCTIONS
# #############################################
# * Lines that start with a # are comments
# * You can run a code line by placing the cursor in the line and clicking
#   CTRL/Command + Enter
# * In between you will see the ??? Questions which refers to a question
#   in the question document provided on Canvas.
# #############################################
# R SETUP
# #############################################
# Here we install and load all required packages.
if (!("BiocManager" %in% installed.packages())) { install.packages("BiocManager", update=FALSE) }
if (!("rstudioapi" %in% installed.packages())) { BiocManager::install("rstudioapi", update=FALSE) }
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db", update=FALSE) }
if (!("dplyr" %in% installed.packages())) { BiocManager::install("dplyr", update=FALSE) }
if (!("EnhancedVolcano" %in% installed.packages())) { BiocManager::install("EnhancedVolcano", update=FALSE) }
if (!("readxl" %in% installed.packages())) { BiocManager::install("readxl", update=FALSE) }
if (!("clusterProfiler" %in% installed.packages())) { BiocManager::install("clusterProfiler", update=FALSE) }
if (!("enrichplot" %in% installed.packages())) { BiocManager::install("enrichplot", update=FALSE) }
if (!("Rgraphviz" %in% installed.packages())) { BiocManager::install("Rgraphviz", update=FALSE) }
if (!("RCy3" %in% installed.packages())) { BiocManager::install("RCy3", update=FALSE) }
if (!("msigdbr" %in% installed.packages())) { BiocManager::install("msigdbr",update=FALSE) }
if (!("RColorBrewer" %in% installed.packages())) { BiocManager::install("RColorBrewer",update=FALSE) }
if (!("readr" %in% installed.packages())) { BiocManager::install("readr",update=FALSE) }
if (!("rWikiPathways" %in% installed.packages())) { BiocManager::install("rWikiPathways",update=FALSE) }
library(rstudioapi)
library(org.Hs.eg.db)
library(dplyr)
library(EnhancedVolcano)
library(readxl)
library(clusterProfiler)
library(enrichplot)
library(Rgraphviz)
library(RCy3)
library(msigdbr)
library(RColorBrewer)
library(readr)
library(rWikiPathways)
# We will set the working directory to the location where the current
# script is located. This way, we can use relative file path locations.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Here we install and load all required packages.
if (!("BiocManager" %in% installed.packages())) { install.packages("BiocManager", update=FALSE) }
if (!("rstudioapi" %in% installed.packages())) { BiocManager::install("rstudioapi", update=FALSE) }
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db", update=FALSE) }
if (!("dplyr" %in% installed.packages())) { BiocManager::install("dplyr", update=FALSE) }
if (!("EnhancedVolcano" %in% installed.packages())) { BiocManager::install("EnhancedVolcano", update=FALSE) }
if (!("readxl" %in% installed.packages())) { BiocManager::install("readxl", update=FALSE) }
if (!("clusterProfiler" %in% installed.packages())) { BiocManager::install("clusterProfiler", update=FALSE) }
if (!("enrichplot" %in% installed.packages())) { BiocManager::install("enrichplot", update=FALSE) }
if (!("Rgraphviz" %in% installed.packages())) { BiocManager::install("Rgraphviz", update=FALSE) }
if (!("RCy3" %in% installed.packages())) { BiocManager::install("RCy3", update=FALSE) }
if (!("msigdbr" %in% installed.packages())) { BiocManager::install("msigdbr",update=FALSE) }
if (!("RColorBrewer" %in% installed.packages())) { BiocManager::install("RColorBrewer",update=FALSE) }
if (!("readr" %in% installed.packages())) { BiocManager::install("readr",update=FALSE) }
if (!("rWikiPathways" %in% installed.packages())) { BiocManager::install("rWikiPathways",update=FALSE) }
library(rstudioapi)
library(org.Hs.eg.db)
library(dplyr)
library(EnhancedVolcano)
library(readxl)
library(clusterProfiler)
library(enrichplot)
library(Rgraphviz)
library(RCy3)
library(msigdbr)
library(RColorBrewer)
library(readr)
library(rWikiPathways)
# We will set the working directory to the location where the current
# script is located. This way, we can use relative file path locations.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
getwd
getwd()
setwd("C:/Users/Antonio/Documents")
out.folder <- "output/"
dir.create(out.folder)
data <- read_excel("data/data-breast-cancer.xlsx")
setwd("C:/Users/Antonio/Downloads/BBS2061 - Academic Project/data")
out.folder <- "output/"
dir.create(out.folder)
data <- read_excel("data/data-breast-cancer.xlsx")
# We will set the working directory to the location where the current
# script is located. This way, we can use relative file path locations.
setwd("C:\Users\Antonio\Downloads\BBS2061 - Academic Project\data")
# script is located. This way, we can use relative file path locations.
setwd("C:/Users/Antonio/Downloads/BBS2061 - Academic Project/data")
out.folder <- "output/"
dir.create(out.folder)
data <- read_excel("data/data-breast-cancer.xlsx")
data <- read_excel("data-breast-cancer.xlsx")
log2fc.cutoff <- 1
pvalue.cutoff <- 0.05
degs <- data[abs(data$log2FC) > log2fc.cutoff & data$PValue < pvalue.cutoff,]
# let's write out the table with all differentially expressed genes
write.table(degs, file=paste0(out.folder,"degs.tsv"), row.names = FALSE, sep="\t", quote = FALSE)
genes.up <- 1
genes.down <- -1
genes.up <- data[data$log2FC > log2fc.cutoff & data$adj.PValue < pvalue.cutoff,]
genes.down <- data[data$log2FC < -log2fc.cutoff & data$adj.PValue < pvalue.cutoff,]
# ??? Q
EnhancedVolcano(data, title = paste0("Breast cancer vs. Healthy (",nrow(degs), " DEGs)"), lab = data$GeneName, x = "log2FC", y = "PValue", pCutoff = pvalue.cutoff, FCcutoff = log2fc.cutoff, labSize = 3, xlim = c(-15,15), ylim=c(0,8))
# the code below saves the figure in a file in our output folder
filename <- paste0(out.folder,"volcano-plot.png")
png(filename , width = 3000, height = 2000, res = 300)
EnhancedVolcano(data, title = paste0("Breast cancer vs. Healthy (",nrow(degs), " DEGs)"), lab = data$GeneName, x = "log2FC", y = "PValue", pCutoff = pvalue.cutoff, FCcutoff = log2fc.cutoff, labSize = 3, xlim = c(-15,15), ylim=c(0,8))
dev.off()
genes_of_interest <- c("HRAS", "PIK3R2")
data$highlight <- ifelse(data$GeneName %in% genes_of_interest, "yes", "no")
# Create the volcano plot
EnhancedVolcano(
data,
lab = data$label,
x = 'log2FC',
y = 'PValue',
pCutoff = pvalue.cutoff,
FCcutoff = log2fc.cutoff,
labSize = 3,
xlim = c(-15, 15),
ylim = c(0, 8),
selectLab = genes_of_interest,  # Highlight genes of interest
colCustom = c("grey30", "forestgreen", "royalblue", "goldenrod", "red3"),  # Custom colors for highlighting
colAlpha = 1,  # Transparency
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'black'
)
library(EnhancedVolcano)
# Set up labels to only display gene names for genes of interest
data$label <- ifelse(data$GeneName %in% genes_of_interest, data$GeneName, NA)
# Example data frame structure (replace with your actual data loading code)
data <- read.csv("your_data.csv")
#Creating a Volcano Plot with highlighted genes of interest
#Prepare the list of genes of interest
genes_of_interest <- c("HRAS", "PIK3R2")
data$highlight <- ifelse(data$GeneName %in% genes_of_interest, "yes", "no")
library(EnhancedVolcano)
# Set up labels to only display gene names for genes of interest
data$label <- ifelse(data$GeneName %in% genes_of_interest, data$GeneName, NA)
# Example data frame structure (replace with your actual data loading code)
data <- read.csv("data-breast-cancer.xlsx")
# List of genes of interest
genes_of_interest <- c("Gene1", "Gene2", "Gene3", "Gene4", "Gene5")
# Initialize label column as NA for all rows
data$label <- NA
# Create the volcano plot
EnhancedVolcano(
data,
lab = data$label,
x = 'log2FC',
y = 'PValue',
pCutoff = pvalue.cutoff,
FCcutoff = log2fc.cutoff,
labSize = 3,
xlim = c(-15, 15),
ylim = c(0, 8),
selectLab = genes_of_interest,  # Highlight genes of interest
colCustom = c("grey30", "forestgreen", "royalblue", "goldenrod", "red3"),  # Custom colors for highlighting
colAlpha = 1,  # Transparency
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
drawConnectors = TRUE,
widthConnectors = 0.5,
colConnectors = 'black'
)
f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
f <- intersect(f1$nodes, f2$nodes)
clearSelection()
selectNodes(f, by.col = "shared name")
createSubnetwork("selected", "all")
