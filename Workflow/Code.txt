# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

# Exploratory Data Analysis
# Here we install and load all required packages. 
if (!("BiocManager" %in% installed.packages())) { install.packages("BiocManager", update=FALSE) }
if (!("rstudioapi" %in% installed.packages())) { BiocManager::install("rstudioapi", update=FALSE) }
if (!("org.Hs.eg.db" %in% installed.packages())) { BiocManager::install("org.Hs.eg.db", update=FALSE) }
if (!("dplyr" %in% installed.packages())) { BiocManager::install("dplyr", update=FALSE) }
if (!("EnhancedVolcano" %in% installed.packages())) { BiocManager::install("EnhancedVolcano", update=FALSE) }
if (!("readxl" %in% installed.packages())) { BiocManager::install("readxl", update=FALSE) }
if (!("clusterProfiler" %in% installed.packages())) { BiocManager::install("clusterProfiler", update=FALSE) }
if (!("enrichplot" %in% installed.packages())) { BiocManager::install("enrichplot", update=FALSE) }
if (!("Rgraphviz" %in% installed.packages())) { BiocManager::install("Rgraphviz", update=FALSE) }
if (!("RCy3" %in% installed.packages())) { BiocManager::install("RCy3", update=FALSE) }
if (!("msigdbr" %in% installed.packages())) { BiocManager::install("msigdbr",update=FALSE) }
if (!("RColorBrewer" %in% installed.packages())) { BiocManager::install("RColorBrewer",update=FALSE) }
if (!("readr" %in% installed.packages())) { BiocManager::install("readr",update=FALSE) }
if (!("rWikiPathways" %in% installed.packages())) { BiocManager::install("rWikiPathways",update=FALSE) }

library(rstudioapi)
library(org.Hs.eg.db)
library(dplyr)
library(EnhancedVolcano)
library(readxl)
library(clusterProfiler)
library(enrichplot)
library(Rgraphviz)
library(RCy3)
library(msigdbr)
library(RColorBrewer)
library(readr)
library(rWikiPathways)

# We will set the working directory to the location where the current 
# script is located. This way, we can use relative file path locations. 
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

# We will create an output folder where all figures and files will be stored
out.folder <- "output/"
dir.create(out.folder)


# #############################################
# IMPORT DATA
# #############################################

# Next we will import the dataset
data <- read_excel("data/data-breast-cancer.xlsx")


# #############################################
# DIFFERENTIALLY EXPRESSED GENES
# #############################################

# Let's see how many genes are differentially expressed in our dataset

log2fc.cutoff <- 1
pvalue.cutoff <- 0.05
degs <- data[abs(data$log2FC) > log2fc.cutoff & data$P.Value < pvalue.cutoff,]

# let's write out the table with all differentially expressed genes
write.table(degs, file=paste0(out.folder,"degs.tsv"), row.names = FALSE, sep="\t", quote = FALSE)


# Based on the code in line 68, can you adapt the code to select only up- or
# down-regulated genes? 

genes.up <- data[data$log2FC > log2fc.cutoff & data$P.Value < pvalue.cutoff,]
genes.down <- data[data$log2FC < -log2fc.cutoff & data$P.Value < pvalue.cutoff,]


# #############################################
# VOLCANO PLOT
# #############################################

# Let's create a Volcano plot to get a better understand of the intensity and
# direction of the changed genes

EnhancedVolcano(data, title = paste0("Breast Cancer vs. Healthy (",nrow(degs), " DEGs)"), lab = data$label, x = "log2FC", y = "PValue", pCutoff = pvalue.cutoff, FCcutoff = log2fc.cutoff, labSize = 8, selectLab = genes_of_interest, drawConnectors = TRUE, widthConnectors = 4, colConnectors = "yellow", xlim = c(-15,15), ylim=c(0,8))

# the code below saves the figure in a file in our output folder
filename <- paste0(out.folder,"volcano-plot-new.png")
png(filename , width = 4000, height = 2500, res = 300)
EnhancedVolcano(data, title = paste0("Breast Cancer vs. Healthy (",nrow(degs), " DEGs)"), lab = data$label, x = "log2FC", y = "PValue", pCutoff = pvalue.cutoff, FCcutoff = log2fc.cutoff, labSize = 8, selectLab = genes_of_interest, drawConnectors = TRUE, widthConnectors = 4, colConnectors = "yellow", xlim = c(-15,15), ylim=c(0,8))
dev.off()


# Enrichtment Analysis

# #############################################
# PATHWAY ENRICHMENT ANALYSIS
# #############################################

# We will now explore what kind of pathways are affected by 
# performing a pathway enrichment analysis. This was done to find out whether the pathway of interest was up or downregulated.

# Let's retrieve information about the human pathways in WikiPathways
genesets.wp <- msigdbr(species = "Homo sapiens", subcategory = "CP:WIKIPATHWAYS") %>% dplyr::select(gs_name, ensembl_gene)

# We will start by looking at pathways that are up-regulated
res.wp.up <- clusterProfiler::enricher(genes.up$GeneID, TERM2GENE = genesets.wp, pAdjustMethod = "fdr", pvalueCutoff = 0.05, minGSSize = 5, maxGSSize = 400)
res.wp.up.df <- as.data.frame(res.wp.up)
write.table(res.wp.up.df, file=paste0(out.folder,"wp-up.txt"), sep="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

res.wp.down <- clusterProfiler::enricher(genes.down$GeneID, TERM2GENE = genesets.wp, pAdjustMethod = "fdr", pvalueCutoff = 0.05, minGSSize = 5, maxGSSize = 400)
res.wp.down.df <- as.data.frame(res.wp.down)
write.table(res.wp.down.df, file=paste0(out.folder,"wp-down.txt"), sep="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

# Let's see if the treeplots (discussed in workshop 3) help with the interpretation:
# we first calculate the similarity between the processes
res.wp.up.sim <- enrichplot::pairwise_termsim(res.wp.up)
res.wp.down.sim <- enrichplot::pairwise_termsim(res.wp.down)

# then we visualize them in a treeplot
treeplot(res.wp.up.sim, label_format = 0.5, showCategory = 70)
treeplot(res.wp.down.sim, label_format = 0.5, showCategory = 70, cluster.params = list(n = 12))

# we will also save files that has a nicely readable figure
filename <- paste0(out.folder,"WP_Upregulated_Treeplot.png")
png(filename , width = 3000, height = 4000, res = 150)
plot(treeplot(res.wp.up.sim, label_format = 0.5, showCategory = 70))
dev.off()

filename <- paste0(out.folder,"WP_Downregulated_Treeplot.png")
png(filename , width = 3000, height = 4000, res = 150)
plot(treeplot(res.wp.down.sim, label_format = 0.5, showCategory = 70, cluster.params = list(n = 12)))
dev.off()

# Network and Drug Analysis
# #############################################
# PATHWAY VISUALIZATION
# #############################################

# Check if Cytoscape is running
cytoscapePing()

# Check if WikiPathways app is installed
if(!"name: WikiPathways, version: 3.3.10, status: Installed" %in% RCy3::getInstalledApps()) {
  RCy3::installApp("WikiPathways")
}

# Open Pathway of interest - based on the res.wp.up.df and res.wp.down.df, you can
# select pathways of interest
# Find the associated pathway identifier
# https://www.wikipathways.org/browse/table.html
# Make sure you select the ID of the human pathway

pw.id <- "WP4172"
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pw.id)) 

toggleGraphicsDetails()

# load the data into Cytoscape (columns get added at the bottom)
loadTableData(data, data.key.column = "GeneID", table.key.column = "Ensembl")

# visualize the log2FC as a node fill color gradient
RCy3::setNodeColorMapping(table.column = 'log2FC', mapping.type = 'c', table.column.values = c(-1,0,1), colors = paletteColorBrewerRdBu, default.color = '#FFFFFF', style.name = 'WikiPathways')

# Select significant genes and change border color
x <- RCy3::createColumnFilter('P.Value', 'P.Value', 0.05, "LESS_THAN")
RCy3::setNodeBorderColorBypass(x$nodes, new.colors = "#009900")
RCy3::setNodeBorderWidthBypass(x$nodes, new.sizes = 7)
RCy3::clearSelection()

exportImage(paste0(out.folder,'pathway-',pw.id,'.png'), type='PNG', zoom=500) 

# Network and Drug Analysis

pw.id <- "WP4172"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pw.id)) 

# load the data into Cytoscape (columns get added at the bottom)
loadTableData(data, data.key.column = "GeneID", table.key.column = "Ensembl")

# visualize the log2FC as a node fill color gradient
RCy3::setNodeColorMapping(table.column = 'log2FC', mapping.type = 'c', table.column.values = c(-1,0,1), colors = paletteColorBrewerRdBu, default.color = '#FFFFFF', style.name = 'WikiPathways-As-Network')

# Select significant genes and change border color
x <- RCy3::createColumnFilter('P.Value', 'P.Value', 0.05, "LESS_THAN")
RCy3::setNodeBorderColorBypass(x$nodes, new.colors = "#009900")
RCy3::setNodeBorderWidthBypass(x$nodes, new.sizes = 7)
RCy3::clearSelection()

# copied and adapted from Step 5 (at the end)

# Check if CyTargetLinker app is installed
if(!"name: CyTargetLinker, version: 4.1.0, status: Installed" %in% RCy3::getInstalledApps()) {
  RCy3::installApp("CyTargetLinker")
}


unzip(system.file("extdata","drugbank-5.1.0.xgmml.zip", package="rWikiPathways"), exdir = getwd())
drugbank <- file.path(getwd(), "drugbank-5.1.0.xgmml")

commandsRun(paste0('cytargetlinker extend idAttribute="GeneID" linkSetFiles="', drugbank, '"') )
commandsRun('cytargetlinker applyLayout network="current"')

my.drugs <- selectNodes("drug", by.col = "CTL.Type", preserve = FALSE)$nodes #easy way to collect node SUIDs by column value
clearSelection()
setNodeColorBypass(my.drugs, "#DD99FF")
setNodeShapeBypass(my.drugs, "hexagon")

drug.labels <- getTableColumns(columns=c("SUID","CTL.label"))
drug.labels <- na.omit(drug.labels)
mapply(function(x,y) setNodeLabelBypass(x,y), drug.labels$SUID, drug.labels$CTL.label)



f1 <- createColumnFilter("log2FC", "log2FC", 1, "GREATER_THAN")
f2 <- createColumnFilter("PValue", "PValue", 0.05, "LESS_THAN")
f3 <- createColumnFilter("log2FC", "log2FC", -1, "LESS_THAN")
f.drugs <- createColumnFilter("CTL.Type", "CTL.Type", "drug", "IS")

# select genes that fulfil both criteria
f <- union(f1$nodes, f3$nodes)
x <- intersect(f, f2$nodes)
f.final <- union(x, f.drugs$nodes)


#normal continuation
clearSelection()
selectNodes(f.final, by.col = "shared name")


createSubnetwork("selected", "all")

#normal continuation
clearSelection()
selectNodes(x, by.col = "shared name")
createSubnetwork("selected", "all")



